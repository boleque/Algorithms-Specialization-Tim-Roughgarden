
Sorted Arrays: Supported Operations

1. search (binary search) 	-> O(logn)
2. ith ordered statistics 	-> O(1)
3. min/max 				  	-> O(1)
4. pred/succ 			  	-> O(1)
5. rank  					-> O(logn) (how many keys a less/equal/more than given)
6. output in spec order		-> O(n)

Doesn't handle effictive insertions and deletions O(n) !

Balanced Search Trees: Supported Operations (dynamic version of sorted array)

1. search (binary search) 	-> O(logn)
2. ith ordered statistics 	-> O(logn)
3. min/max 				  	-> O(logn)
4. pred/succ 			  	-> O(logn)
5. rank 					-> O(logn) (how many keys a less/equal/more than given)
6. output in spec order	  	-> O(n)
7. insert 					-> O(logn)
8. delete 					-> O(logn)

Example:
		3
	  /   \
	1	   2
	  \     \
	   2 	 4

BST descr:
- one node per key
- eache node has left / right / parent pointer

BST property:
				   Root
				/		\
	X >= LeftSubTree	RightSubTree > X
(In contrast, in heaps parents have to be smaller than children)

Duplicated refers to implementation convention

The height of a BST
Noe: Many possible trees for a set of keys

Valid tree:
	 3
   /    \
1		  5
   \    /
	2	3

Also valid:
         5
		/
       4
	  /
	 3
	/ 
   2
  / 
 1

The height of BST:
Is the longest path from root to leaf
Could be anywhere from ~log(n) to ~ n

Searching and Inserting:
To search for k in Tree T
- start at the root
- traverse left (if k < key at current node) / right (if k > key at current node)
- return node with key k or null 

To insert
- search for a key k
- if k is not in tree yet
- rewire final null ptr to point to new node with key k

Min, Max, Pred, Succ:
Compute the minimum key of a tree
- search at root keep following left child
Computer the predecessor of key k
- easy case: if k's left subtree nonempty, return max key in left subtree;
- otherwise:  (no left subtree) follow parent pointer until you get to node smaller than your own

In-order Traversal (running time O(n)):
To print out keys in increasing order
- let r = root of search tree, with subtree Tl and Tr;
- recurse on Tl (all smaller keys)
- print out r's keys
- recurse on Tr (all bigger keys)
- print out r's keys again

Deletion:
To delete keys from a search tree
- search for k
easy case (k has no children):
- just delete k's node from tree, done
medium case (k has one child): 
- replace with unique left child
difficult case (k has two children):
- compute k's predecessor l (next smallest key)
- swap k and l

Select and rank:
Idea - store an extra info at each tree node about tree size(x) = # of tree nodes
in subtree rooted at x
if x has children y and z, then size(y) + size(z) + 1 (equals size(x))

	 3 (size 5)
   /    \
1 size(2) #5 size(2)
   \    /
	2	3 #size(1)

How to select ith order statistics:
- start at root x, with subtree y and z
- let a - size(y) [a =0 if x has no left child]
- if a = i-1 return x's key
- if a >= i recurse in left subtree
- if a < i - 1 recurse in right subtree
